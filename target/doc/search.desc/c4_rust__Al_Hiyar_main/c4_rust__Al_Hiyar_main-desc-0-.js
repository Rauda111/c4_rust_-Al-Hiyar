searchState.loadedDescShard("c4_rust__Al_Hiyar_main", 0, "c4.rs – A Minimal Self‑Hosting C Compiler in Rust\nThe lexer module converts C source code into a sequence of …\nThe parser module implements a recursive descent parser …\nThe virtual machine (VM) executes opcodes generated by the …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTokenizes the input C source code into a vector of tokens.\nContains the error value\nContains the success value\nReturns a reference to the current token.\nConsumes the current token if it matches the given token.\nExpects that the current token matches the given token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new parser instance.\nPublic function to parse tokens.\nPublic API: parses tokens into opcodes.\nParses an expression.\nParses an if–else statement: if ( expr ) stmt [ else …\nParses a local variable declaration: int x, y;\nParses the entire program.\nParses a statement.\nParses a while statement: while ( expr ) stmt\nExecutes a sequence of opcodes and returns the final …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")